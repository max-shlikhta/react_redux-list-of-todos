{"version":3,"sources":["store/types.ts","store/index.ts","api/api.ts","store/actions.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["ActionsType","initialState","todos","user","store","createStore","state","action","type","AddTodos","payload","HandleCheck","map","todo","id","completed","AddUser","ClearUser","composeWithDevTools","applyMiddleware","thunk","request","endpoint","fetch","then","response","ok","Error","status","statusText","json","addUser","loadUser","userId","dispatch","getUserById","catch","getTodosSelector","getUserSelector","CurrentUser","React","memo","useDispatch","selectedUser","useSelector","className","name","email","phone","onClick","Loader","TodoList","currentUser","useState","query","setQuery","selectedOption","setSelectedOption","useEffect","a","addTodoAction","visibledTodos","useMemo","filter","lowerCaseQuery","toLowerCase","title","includes","length","placeholder","value","onChange","event","target","cn","htmlFor","String","defaultChecked","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb7bd708.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\n\nexport interface State {\n  todos: Todo[],\n  user: User | null,\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P;\n}\n\nexport enum ActionsType {\n  AddTodos = 'addTodos',\n  AddUser = 'addUser',\n  ClearUser = 'clearUser',\n  HandleCheck = 'handleCheck',\n}\n\nexport type AddTodosAction = Action<ActionsType.AddTodos, Todo[]>;\n\nexport type AddUserAction = Action<ActionsType.AddUser, User | null>;\n\ntype ClearUserAction = BaseAction<ActionsType.ClearUser>;\ntype HandleCheck = Action<ActionsType.HandleCheck, number>;\n\nexport type Actions = (\n  AddTodosAction\n  | AddUserAction\n  | ClearUserAction\n  | HandleCheck\n);\n","import {\n  createStore, Reducer, applyMiddleware, Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Actions, ActionsType, State } from './types';\n\nconst initialState = {\n  todos: [],\n  user: null,\n};\n\nconst rootReducer: Reducer<State, Actions> = (\n  state = initialState,\n  action,\n): State => {\n  switch (action.type) {\n    case ActionsType.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n\n    case ActionsType.HandleCheck:\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          if (todo.id === action.payload) {\n            return { ...todo, completed: !todo.completed };\n          }\n\n          return todo;\n        }),\n      };\n\n    case ActionsType.AddUser:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionsType.ClearUser:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store: Store<State, Actions> = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","const API_URL = 'https://mate.academy/students-api/';\n\nconst request = (endpoint: string) => {\n  return fetch(`${API_URL}/${endpoint}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => request('todos');\n\nexport const getUserById = (userId: number): Promise<User> => request(`users/${userId}`);\n","import { Dispatch } from 'react';\nimport { getTodos, getUserById } from '../api/api';\nimport {\n  Actions, ActionsType, AddTodosAction, AddUserAction,\n} from './types';\n\nconst addTodos = (payload: Todo[]): AddTodosAction => ({\n  type: ActionsType.AddTodos,\n  payload,\n});\n\nexport const handleCheck = (payload: number) => ({\n  type: ActionsType.HandleCheck,\n  payload,\n});\n\nexport const addUser = (payload: User | null): AddUserAction => ({\n  type: ActionsType.AddUser,\n  payload,\n});\n\nexport const clearUser = () => ({\n  type: ActionsType.ClearUser,\n});\n\nexport const loadTodos = () => {\n  return async (dispatch: Dispatch<Actions>) => {\n    const todos = await getTodos();\n\n    const addTodoAction = addTodos(todos);\n\n    dispatch(addTodoAction);\n  };\n};\n\nexport const loadUser = (userId: number) => {\n  return (dispatch: Dispatch<Actions>) => {\n    getUserById(userId)\n      .then(user => dispatch(addUser(user)))\n      .catch(() => dispatch(addUser(null)));\n  };\n};\n","import { State } from './types';\n\nexport const getTodosSelector = (state: State): Todo[] => state.todos;\n\nexport const getUserSelector = (state: State): User | null => state.user;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearUser } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n  const selectedUser = useSelector(getUserSelector);\n\n  return (\n    <>\n      {selectedUser\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {selectedUser.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => dispatch(clearUser())}\n            >\n              Clear\n            </button>\n          </>\n        )\n        : (\n          <p className=\"CurrentUser__error\">\n            User not selected\n          </p>\n        )}\n    </>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = React.memo(() => (\n  <div className=\"lds-roller\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n));\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport cn from 'classnames';\nimport { handleCheck, loadTodos, loadUser } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\nimport './TodoList.scss';\nimport { Loader } from '../Loader/Loader';\n\nexport const TodoList: React.FC = React.memo(() => {\n  const todos = useSelector(getTodosSelector);\n  const currentUser = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  useEffect(() => {\n    dispatch(loadTodos());\n  }, []);\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const visibledTodos = useMemo(() => (\n    todos.filter(todo => {\n      const lowerCaseQuery = query.toLowerCase();\n      const lowerCaseTitle = todo.title.toLowerCase();\n\n      if (!lowerCaseTitle.includes(lowerCaseQuery)) {\n        return false;\n      }\n\n      switch (selectedOption) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    })\n  ), [todos, selectedOption, query]);\n\n  return (\n    <>\n      {todos.length\n        ? (\n          <div className=\"TodoList\">\n            <h2>Todos:</h2>\n\n            <input\n              className=\"TodoList__input\"\n              type=\"text\"\n              placeholder=\"Search title\"\n              value={query}\n              onChange={handleInput}\n            />\n\n            <select\n              className=\"TodoList__input\"\n              value={selectedOption}\n              onChange={handleSelect}\n            >\n              <option value=\"all\">all</option>\n              <option value=\"active\">active</option>\n              <option value=\"completed\">completed</option>\n            </select>\n\n            <div className=\"TodoList__list-container\">\n              <ul className=\"TodoList__list\">\n                {visibledTodos.map(({\n                  id, completed, title, userId,\n                }) => (\n                  <li\n                    key={id}\n                    className={cn(\n                      'TodoList__item',\n                      { 'TodoList__item--unchecked': !completed },\n                      { 'TodoList__item--checked': completed },\n                    )}\n                  >\n                    <label htmlFor={String(id)}>\n                      <input\n                        type=\"checkbox\"\n                        id={String(id)}\n                        defaultChecked={completed}\n                        onChange={() => dispatch(handleCheck(id))}\n                      />\n                      <p className=\"TodoList__title\">\n                        {title}\n                      </p>\n                    </label>\n\n                    <button\n                      className={cn(\n                        'TodoList__user-button',\n                        {\n                          'TodoList__user-button--selected': currentUser\n                        && userId === currentUser.id,\n                        },\n                        'button',\n                      )}\n                      type=\"button\"\n                      onClick={() => dispatch(loadUser(userId))}\n                    >\n                      {`User# ${userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )\n        : (\n          <Loader />\n        )}\n    </>\n  );\n});\n","import './App.scss';\nimport './components/styles/general.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport const App: React.FC = () => (\n  <div className=\"App\">\n    <div className=\"App__sidebar\">\n      <TodoList />\n    </div>\n\n    <div className=\"App__content\">\n      <div className=\"App__content-container\">\n        <CurrentUser />\n      </div>\n    </div>\n  </div>\n);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}